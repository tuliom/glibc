# This file is generated from configure.ac by Autoconf.  DO NOT EDIT!
 # Local configure fragment for sysdeps/powerpc/powerpc64le.


{ $as_echo "$as_me:${as_lineno-$LINENO}: checking if $CC supports binary128 floating point type" >&5
$as_echo_n "checking if $CC supports binary128 floating point type... " >&6; }
if ${libc_cv_compiler_powerpc64le_binary128_ok+:} false; then :
  $as_echo_n "(cached) " >&6
else
  save_CFLAGS="$CFLAGS"
CFLAGS="$CFLAGS -Werror -mfloat128"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

__float128 a, b, c, d, e;
int i;

__float128
foobar (__float128 x)
{
  a = __builtin_nansf128 ("0");
  b = __builtin_huge_valf128 ();
  c = __builtin_inff128 ();
  d = __builtin_fabsf128 (x);
  e = __builtin_nanf128 ("0");
  i = __builtin_signbit (x);
  return __builtin_copysignf128 (x, x);
}

_ACEOF
if ac_fn_c_try_compile "$LINENO"; then :
  libc_cv_compiler_powerpc64le_binary128_ok=yes
else
  libc_cv_compiler_powerpc64le_binary128_ok=no
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
CFLAGS="$save_CFLAGS"
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $libc_cv_compiler_powerpc64le_binary128_ok" >&5
$as_echo "$libc_cv_compiler_powerpc64le_binary128_ok" >&6; }
if test "$libc_cv_compiler_powerpc64le_binary128_ok" != "yes"; then :
  critic_missing="$critic_missing binary128 floating point type (GCC >= 7.0) is required on powerpc64le."
fi

{ $as_echo "$as_me:${as_lineno-$LINENO}: checking if $CC compiles signbit with 128-bit floating point type" >&5
$as_echo_n "checking if $CC compiles signbit with 128-bit floating point type... " >&6; }
if ${libc_cv_compiler_powerpc64le_ice+:} false; then :
  $as_echo_n "(cached) " >&6
else
  save_CFLAGS="$CFLAGS"
CFLAGS="$CFLAGS -mabi=ieeelongdouble -Wno-psabi"
cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

int sbr (long double a) { return __builtin_signbit (a); }
int sbm (long double *a) { return __builtin_signbit (*a); }
int sbo (long double *a) { return __builtin_signbit (a[4]); }
int sbi (long double *a, unsigned long n) { return __builtin_signbit (a[n]); }
void sbs (int *p, long double a) { *p = __builtin_signbit (a); }

_ACEOF
if ac_fn_c_try_compile "$LINENO"; then :
  libc_cv_compiler_powerpc64le_ice=yes
else
  libc_cv_compiler_powerpc64le_ice=no
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
CFLAGS="$save_CFLAGS"
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $libc_cv_compiler_powerpc64le_ice" >&5
$as_echo "$libc_cv_compiler_powerpc64le_ice" >&6; }
if test "$libc_cv_compiler_powerpc64le_ice" != "yes"; then :
  critic_missing="$critic_missing GCC >= 7.3 is required on powerpc64le."
fi

OLD_CFLAGS="$CFLAGS"
CFLAGS="$CFLAGS $libc_cv_cc_submachine"
{ $as_echo "$as_me:${as_lineno-$LINENO}: checking if the target machine is at least POWER8" >&5
$as_echo_n "checking if the target machine is at least POWER8... " >&6; }
if ${libc_cv_target_power8_ok+:} false; then :
  $as_echo_n "(cached) " >&6
else

cat confdefs.h - <<_ACEOF >conftest.$ac_ext
/* end confdefs.h.  */

#ifndef _ARCH_PWR8
#error invalid target architecture
#endif

_ACEOF
if ac_fn_c_try_compile "$LINENO"; then :
  libc_cv_target_power8_ok=yes
else
  libc_cv_target_power8_ok=no
fi
rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
fi
{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $libc_cv_target_power8_ok" >&5
$as_echo "$libc_cv_target_power8_ok" >&6; }
if test "$libc_cv_target_power8_ok" != "yes"; then :
  critic_missing="$critic_missing POWER8 or newer is required on powerpc64le."
fi
CFLAGS="$OLD_CFLAGS"

test -n "$critic_missing" && as_fn_error $? "*** $critic_missing" "$LINENO" 5
